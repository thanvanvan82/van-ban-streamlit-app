# app.py

import os
import re
import base64
import io

import dash
from dash import dcc, html, callback, Input, Output, State, ALL, ctx
import dash_bootstrap_components as dbc
from docxtpl import DocxTemplate
from docx import Document

# ==================== C·∫§U H√åNH V√Ä H·∫∞NG S·ªê ====================

# ƒê·ªãnh nghƒ©a c√°c m·∫´u vƒÉn b·∫£n (gi·ªØ nguy√™n t·ª´ code g·ªëc)
DOCUMENT_TYPES = {
    "M·∫´u 1: Ngh·ªã quy·∫øt (c√° bi·ªát)": {"list": "list_1.docx", "template": "mau_1_nghi_quyet.docx"},
    "M·∫´u 2: Quy·∫øt ƒë·ªãnh (c√° bi·ªát) quy ƒë·ªãnh tr·ª±c ti·∫øp (ƒë·ªëi v·ªõi H·ªôi ƒë·ªìng, Ban ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng d·∫•u)": {"list": "list_2.docx", "template": "mau_2_quyet_dinh_truc_tiep_hd_ban.docx"},
    "M·∫´u 3: Quy·∫øt ƒë·ªãnh (c√° bi·ªát) quy ƒë·ªãnh tr·ª±c ti·∫øp": {"list": "list_3.docx", "template": "mau_3_quyet_dinh_truc_tiep.docx"},
    "M·∫´u 4: Quy·∫øt ƒë·ªãnh (c√° bi·ªát) quy ƒë·ªãnh gi√°n ti·∫øp": {"list": "list_4.docx", "template": "mau_4_quyet_dinh_gian_tiep.docx"},
    "M·∫´u 4a: Quy ch·∫ø, quy ƒë·ªãnh (ban h√†nh k√®m theo quy·∫øt ƒë·ªãnh)": {"list": "list_4a.docx", "template": "mau_4a_quy_che_quy_dinh.docx"},
    "M·∫´u 4b: VƒÉn b·∫£n kh√°c (ban h√†nh ho·∫∑c ph√™ duy·ªát k√®m theo quy·∫øt ƒë·ªãnh)": {"list": "list_4b.docx", "template": "mau_4b_van_ban_khac.docx"},
    "M·∫´u 5a: C√¥ng vƒÉn h√†nh ch√≠nh (Khi g·ª≠i ƒë·∫øn 1 c∆° quan, ƒë∆°n v·ªã)": {"list": "list_5a.docx", "template": "mau_5a_cong_van_hanh_chinh_mot.docx"},
    "M·∫´u 5b: C√¥ng vƒÉn h√†nh ch√≠nh (Khi g·ª≠i ƒë·∫øn nhi·ªÅu c∆° quan, ƒë∆°n v·ªã)": {"list": "list_5b.docx", "template": "mau_5b_cong_van_hanh_chinh_nhieu.docx"},
    "M·∫´u 6: VƒÉn b·∫£n c√≥ t√™n lo·∫°i": {"list": "list_6.docx", "template": "mau_6_van_ban_co_ten_loai.docx"},
    "M·∫´u 7: T·ªù tr√¨nh": {"list": "list_7.docx", "template": "mau_7_to_trinh.docx"},
    "M·∫´u 8: Bi√™n b·∫£n": {"list": "list_8.docx", "template": "mau_8_bien_ban.docx"},
    "M·∫´u 9a: Gi·∫•y m·ªùi": {"list": "list_9a.docx", "template": "mau_9a_giay_moi.docx"},
    "M·∫´u 9b: Gi·∫•y m·ªùi": {"list": "list_9b.docx", "template": "mau_9b_giay_moi.docx"},
    "M·∫´u 10: Ph·ª• l·ª•c vƒÉn b·∫£n h√†nh ch√≠nh": {"list": "list_10.docx", "template": "mau_10_phu_luc.docx"},
}
DEFAULT_CHOICE = "M·∫´u 5a: C√¥ng vƒÉn h√†nh ch√≠nh (Khi g·ª≠i ƒë·∫øn 1 c∆° quan, ƒë∆°n v·ªã)"
DATA_DIR = "data"

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng Dash
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP], suppress_callback_exceptions=True)
app.title = "T·∫°o vƒÉn b·∫£n t·ª± ƒë·ªông"

# G√°n Flask server cho bi·∫øn `server`
server = app.server  

# ==================== C√ÅC H√ÄM H·ªñ TR·ª¢ (ƒê√É CH·ªàNH S·ª¨A CHO DASH) ====================

# C√°c h√†m read_fields_and_data_from_list_docx, extract_template_variables, create_sample_list_file
# l√† pure Python n√™n gi·ªØ nguy√™n, kh√¥ng c·∫ßn thay ƒë·ªïi.

def read_fields_and_data_from_list_docx(file_path):
    try:
        doc = Document(file_path)
        fields = []
        data = {}
        if doc.tables:
            for table in doc.tables:
                for row_idx, row in enumerate(table.rows):
                    cells = [cell.text.strip() for cell in row.cells]
                    if row_idx == 0 and any(header in cells[0].lower() for header in ['t√™n tr∆∞·ªùng', 'field', 'tr∆∞·ªùng']):
                        continue
                    if len(cells) >= 3 and cells[0] and cells[1]:
                        field_name, field_label, field_value = cells[0], cells[1], cells[2]
                        clean_name = re.sub(r'[^\w]', '_', field_name.lower().replace(' ', '_')).strip('_')
                        if clean_name:
                            fields.append({
                                'name': clean_name,
                                'label': field_label,
                                'type': 'text_area' if any(w in field_label.lower() for w in ['n·ªôi dung', 'tr√≠ch y·∫øu', 'n∆°i nh·∫≠n']) else 'text_input'
                            })
                            if field_value: data[clean_name] = field_value
        if not fields and not data:
            for p in doc.paragraphs:
                if ':' in p.text.strip():
                    key, value = map(str.strip, p.text.split(':', 1))
                    clean_key = re.sub(r'[^\w]', '_', key.lower().replace(' ', '_')).strip('_')
                    if clean_key:
                        fields.append({'name': clean_key, 'label': key, 'type': 'text_input'})
                        data[clean_key] = value
        return fields, data
    except Exception:
        return [], {}

def extract_template_variables(template_path):
    try:
        doc = Document(template_path)
        variables = set()
        text_content = "\n".join(p.text for p in doc.paragraphs)
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    text_content += "\n" + cell.text
        variables.update(re.findall(r'\{\{\s*(\w+)\s*\}\}', text_content))
        return list(variables)
    except Exception:
        return []

def create_dash_input_field(field):
    """Render input field cho Dash, thay th·∫ø render_input_field c·ªßa Streamlit."""
    field_type = field.get('type', 'text_input').lower()
    field_name = field['name']
    field_label = field['label']
    
    # D√πng pattern-matching ID ƒë·ªÉ callback c√≥ th·ªÉ thu th·∫≠p d·ªØ li·ªáu
    input_id = {'type': 'form-input', 'field_name': field_name}
    
    if field_type in ['text_area', 'textarea']:
        component = dbc.Textarea(id=input_id, placeholder=f"Nh·∫≠p {field_label}...", style={"height": "100px"})
    # Th√™m c√°c lo·∫°i kh√°c n·∫øu c·∫ßn (date, number, etc.)
    # elif field_type == 'date':
    #     component = dcc.DatePickerSingle(id=input_id)
    else:
        component = dbc.Input(id=input_id, type="text", placeholder=f"Nh·∫≠p {field_label}...")
        
    return dbc.Form([dbc.Label(field_label), component], className="mb-3")

# ==================== B·ªê C·ª§C ·ª®NG D·ª§NG (APP LAYOUT) ====================

app.layout = dbc.Container([
    # Store ƒë·ªÉ l∆∞u tr·ªØ tr·∫°ng th√°i trung gian, thay th·∫ø cho c√°c bi·∫øn c·ªßa Streamlit
    dcc.Store(id='fields-store'),
    dcc.Store(id='data-store'),
    dcc.Store(id='template-vars-store'),
    dcc.Store(id='file-paths-store'),
    
    # Component download, s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t b·ªüi callback
    dcc.Download(id="download-docx"),

    # Giao di·ªán ch√≠nh
    html.H1("üìÑ T·∫°o vƒÉn b·∫£n h√†nh ch√≠nh t·ª± ƒë·ªông (Dash Version)", className="my-4"),
    html.P("·ª®ng d·ª•ng ƒë·ªçc d·ªØ li·ªáu c√≥ s·∫µn v√† t·ª± ƒë·ªông ƒëi·ªÅn v√†o m·∫´u tr√¨nh b√†y theo quy ƒë·ªãnh"),
    
    dbc.Row([
        # C·ªôt Sidebar
        dbc.Col(
            dbc.Card([
                dbc.CardHeader("Ch·ªçn M·∫´u tr√¨nh b√†y"),
                dbc.CardBody([
                    dcc.Dropdown(
                        id='doc-type-dropdown',
                        options=[{'label': key, 'value': key} for key in DOCUMENT_TYPES.keys()],
                        value=DEFAULT_CHOICE,
                        clearable=False
                    ),
                    html.Hr(),
                    html.Div(id='file-status-display') # N∆°i hi·ªÉn th·ªã tr·∫°ng th√°i file
                ])
            ]),
            width=4,
        ),
        # C·ªôt n·ªôi dung ch√≠nh
        dbc.Col(
            [
                html.Div(id='main-content-display'), # N∆°i hi·ªÉn th·ªã form ho·∫∑c n√∫t b·∫•m
                html.Div(id='notification-area', className="mt-3") # N∆°i hi·ªÉn th·ªã th√¥ng b√°o
            ],
            width=8,
        )
    ]),
], fluid=True)


# ==================== CALLBACKS (LOGIC C·ª¶A ·ª®NG D·ª§NG) ====================

# Callback 1: Ph√¢n t√≠ch file khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt m·∫´u vƒÉn b·∫£n
@app.callback(
    Output('file-paths-store', 'data'),
    Output('fields-store', 'data'),
    Output('data-store', 'data'),
    Output('template-vars-store', 'data'),
    Output('file-status-display', 'children'),
    Input('doc-type-dropdown', 'value')
)
def analyze_files(selected_doc_type):
    if not selected_doc_type:
        return {}, [], {}, [], dbc.Alert("Vui l√≤ng ch·ªçn m·ªôt m·∫´u.", color="warning")

    selected_files = DOCUMENT_TYPES[selected_doc_type]
    list_path = os.path.join(DATA_DIR, selected_files["list"])
    template_path = os.path.join(DATA_DIR, selected_files["template"])
    
    paths_data = {'list_path': list_path, 'template_path': template_path}
    
    # Ki·ªÉm tra file
    template_exists = os.path.exists(template_path)
    list_exists = os.path.exists(list_path)
    
    status_alerts = []
    if template_exists:
        status_alerts.append(dbc.Alert(f"‚úÖ Template: {template_path}", color="success", className="small"))
    else:
        status_alerts.append(dbc.Alert(f"‚ùå Kh√¥ng t√¨m th·∫•y: {template_path}", color="danger", className="small"))
    
    if list_exists:
        status_alerts.append(dbc.Alert(f"‚úÖ File d·ªØ li·ªáu: {list_path}", color="success", className="small"))
    else:
        status_alerts.append(dbc.Alert(f"‚ùå Kh√¥ng t√¨m th·∫•y: {list_path}", color="danger", className="small"))

    if not template_exists or not list_exists:
        return paths_data, [], {}, [], status_alerts

    # ƒê·ªçc d·ªØ li·ªáu n·∫øu file t·ªìn t·∫°i
    fields, data = read_fields_and_data_from_list_docx(list_path)
    template_vars = extract_template_variables(template_path)
    
    return paths_data, fields, data, template_vars, status_alerts

# Callback 2: Hi·ªÉn th·ªã form ho·∫∑c n√∫t b·∫•m d·ª±a tr√™n k·∫øt qu·∫£ ph√¢n t√≠ch
@app.callback(
    Output('main-content-display', 'children'),
    Input('fields-store', 'data'),
    Input('data-store', 'data'),
    State('file-paths-store', 'data'),
)
def render_main_content(fields, data, paths):
    if not fields or not paths:
        return dbc.Alert("Ch·ªçn m·ªôt m·∫´u ƒë·ªÉ b·∫Øt ƒë·∫ßu ho·∫∑c ki·ªÉm tra l·∫°i file.", color="info")

    list_path = paths.get('list_path', '')
    if not os.path.exists(list_path):
        return dbc.Alert(f"Kh√¥ng th·ªÉ ti·∫øp t·ª•c v√¨ file '{list_path}' kh√¥ng t·ªìn t·∫°i.", color="danger")
    
    fields_without_data = [f for f in fields if f['name'] not in data or not data[f['name']]]

    # K·ªãch b·∫£n 1: ƒê·ªß d·ªØ li·ªáu
    if not fields_without_data:
        return dbc.Card([
            dbc.CardHeader("üéâ T·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ c√≥ s·∫µn!"),
            dbc.CardBody([
                html.P("Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ t·∫°o vƒÉn b·∫£n ngay l·∫≠p t·ª©c."),
                dbc.Button("üîß T·∫°o vƒÉn b·∫£n t·ª´ d·ªØ li·ªáu c√≥ s·∫µn", id="generate-button", color="primary", n_clicks=0, className="w-100")
            ])
        ])

    # K·ªãch b·∫£n 2: Thi·∫øu d·ªØ li·ªáu, hi·ªÉn th·ªã form
    else:
        form_inputs = [create_dash_input_field(field) for field in fields_without_data]
        return dbc.Card([
            dbc.CardHeader("‚úçÔ∏è Vui l√≤ng nh·∫≠p d·ªØ li·ªáu c√≤n thi·∫øu"),
            dbc.CardBody([
                *form_inputs,
                dbc.Button("üîß T·∫°o vƒÉn b·∫£n", id="generate-button", color="primary", n_clicks=0, className="w-100")
            ])
        ])

# Callback 3: X·ª≠ l√Ω vi·ªác t·∫°o v√† t·∫£i vƒÉn b·∫£n
@app.callback(
    Output('download-docx', 'data'),
    Output('notification-area', 'children'),
    Input('generate-button', 'n_clicks'),
    State('file-paths-store', 'data'),
    State('template-vars-store', 'data'),
    State('data-store', 'data'), # D·ªØ li·ªáu c√≥ s·∫µn
    State({'type': 'form-input', 'field_name': ALL}, 'value'), # D·ªØ li·ªáu t·ª´ form
    State({'type': 'form-input', 'field_name': ALL}, 'id'), # ID c·ªßa c√°c input trong form
    prevent_initial_call=True
)
def generate_document(n_clicks, paths, template_vars, existing_data, form_values, form_ids):
    if n_clicks == 0:
        return dash.no_update, dash.no_update

    template_path = paths.get('template_path')
    if not template_path or not os.path.exists(template_path):
        return dash.no_update, dbc.Alert("L·ªói: Kh√¥ng t√¨m th·∫•y file template.", color="danger")

    # X√¢y d·ª±ng context cu·ªëi c√πng
    final_context = existing_data.copy()
    
    # L·∫•y d·ªØ li·ªáu t·ª´ form
    form_data = {id['field_name']: val for id, val in zip(form_ids, form_values)}
    final_context.update(form_data)

    # ƒê·∫£m b·∫£o t·∫•t c·∫£ bi·∫øn ƒë·ªÅu c√≥ gi√° tr·ªã, tr√°nh l·ªói render
    for var in template_vars:
        if var not in final_context or not final_context[var]:
            final_context[var] = f"[{var}]" # Placeholder n·∫øu tr·ªëng

    try:
        doc = DocxTemplate(template_path)
        doc.render(final_context)
        
        # L∆∞u v√†o b·ªô nh·ªõ ƒë·ªám thay v√¨ file t·∫°m
        file_stream = io.BytesIO()
        doc.save(file_stream)
        file_stream.seek(0)
        
        # T·∫°o t√™n file th√¥ng minh
        so_ky_hieu = final_context.get('so_ky_hieu', '').replace('/', '_')
        file_name = f"cong_van_{so_ky_hieu}.docx" if so_ky_hieu else "van_ban_hoan_thanh.docx"
        
        download_data = dcc.send_bytes(file_stream.read(), file_name)
        notification = dbc.Alert("‚úÖ VƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! B·∫Øt ƒë·∫ßu t·∫£i xu·ªëng...", color="success")
        
        return download_data, notification

    except Exception as e:
        error_message = f"‚ùå L·ªói khi t·∫°o vƒÉn b·∫£n: {str(e)}"
        return dash.no_update, dbc.Alert(error_message, color="danger")


# ==================== CH·∫†Y ·ª®NG D·ª§NG ====================

if __name__ == '__main__':
    app.run_server(debug=True)